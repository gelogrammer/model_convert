-- Enable pgvector extension for future use cases if needed
create extension if not exists vector;

-- Create storage bucket for audio recordings
insert into storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
values (
  'recordings',
  'recordings',
  true,
  52428800, -- 50MB file size limit
  '{audio/webm,audio/mp3,audio/mpeg,audio/wav}'
);

-- Set up storage policies to allow authenticated users to upload recordings
create policy "Anyone can view recordings"
  on storage.objects for select
  using ( bucket_id = 'recordings' );

-- Policy for anonymous uploads (FOR TESTING ONLY, REMOVE IN PRODUCTION)
create policy "Anonymous users can upload recordings"
  on storage.objects for insert
  for all
  with check ( bucket_id = 'recordings' );

create policy "Anonymous users can update recordings"
  on storage.objects for update
  for all
  using ( bucket_id = 'recordings' );

create policy "Anonymous users can delete recordings"
  on storage.objects for delete
  for all
  using ( bucket_id = 'recordings' );

-- Regular policies for authenticated users
create policy "Authenticated users can upload recordings"
  on storage.objects for insert
  to authenticated
  with check ( bucket_id = 'recordings' );

create policy "Users can update their own recordings"
  on storage.objects for update
  to authenticated
  using ( bucket_id = 'recordings' AND owner = auth.uid() );

create policy "Users can delete their own recordings"
  on storage.objects for delete
  to authenticated
  using ( bucket_id = 'recordings' AND owner = auth.uid() );

-- Create table for recordings metadata
create table public.recordings (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users(id) default auth.uid() null, -- Allow null for anonymous users
  file_name text not null,
  file_path text not null,
  public_url text not null,
  duration bigint not null,
  recorded_at timestamp with time zone default now(),
  emotion_data jsonb,
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now()
);

-- Add RLS policies for the recordings table
alter table public.recordings enable row level security;

-- Anonymous policies for testing
create policy "Anyone can view recordings"
  on public.recordings for select
  to anon;

create policy "Anyone can insert recordings"
  on public.recordings for insert
  to anon
  with check (true);

create policy "Anyone can update recordings"
  on public.recordings for update
  to anon
  using (true);

create policy "Anyone can delete recordings"
  on public.recordings for delete
  to anon
  using (true);

-- Regular authenticated user policies
create policy "Users can view their own recordings"
  on public.recordings for select
  to authenticated
  using (user_id = auth.uid());

create policy "Users can insert their own recordings"
  on public.recordings for insert
  to authenticated
  with check (user_id = auth.uid());

create policy "Users can update their own recordings"
  on public.recordings for update
  to authenticated
  using (user_id = auth.uid());

create policy "Users can delete their own recordings"
  on public.recordings for delete
  to authenticated
  using (user_id = auth.uid());

-- Add function to automatically set updated_at on update
create or replace function public.set_updated_at()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

create trigger set_recordings_updated_at
before update on public.recordings
for each row execute function public.set_updated_at(); 