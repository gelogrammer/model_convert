-- SQL script to create recordings bucket with proper permissions
-- Must be run in Supabase SQL Editor

-- Check if bucket exists and create it if it doesn't
DO $$
DECLARE
  bucket_exists BOOLEAN;
BEGIN
  -- Check if bucket exists
  SELECT EXISTS (
    SELECT 1 FROM storage.buckets WHERE name = 'recordings'
  ) INTO bucket_exists;
  
  IF NOT bucket_exists THEN
    -- Create the bucket
    INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
    VALUES (
      'recordings',
      'recordings',
      true,
      52428800, -- 50MB file size limit
      '{audio/webm,audio/mp3,audio/mpeg,audio/wav}'
    );
    
    RAISE NOTICE 'Recordings bucket created successfully';
  ELSE
    RAISE NOTICE 'Recordings bucket already exists';
  END IF;
END $$;

-- Now create storage policies if they don't exist already

-- First try to drop existing policies to avoid conflicts
DO $$ 
BEGIN
    -- Attempt to drop policies if they exist
    BEGIN
        DROP POLICY IF EXISTS "Anyone can view recordings" ON storage.objects;
    EXCEPTION WHEN undefined_object THEN
        RAISE NOTICE 'Policy "Anyone can view recordings" does not exist, skipping...';
    END;
    
    BEGIN
        DROP POLICY IF EXISTS "Anonymous users can upload recordings" ON storage.objects;
    EXCEPTION WHEN undefined_object THEN
        RAISE NOTICE 'Policy "Anonymous users can upload recordings" does not exist, skipping...';
    END;
    
    BEGIN
        DROP POLICY IF EXISTS "Anonymous users can update recordings" ON storage.objects;
    EXCEPTION WHEN undefined_object THEN
        RAISE NOTICE 'Policy "Anonymous users can update recordings" does not exist, skipping...';
    END;
    
    BEGIN
        DROP POLICY IF EXISTS "Anonymous users can delete recordings" ON storage.objects;
    EXCEPTION WHEN undefined_object THEN
        RAISE NOTICE 'Policy "Anonymous users can delete recordings" does not exist, skipping...';
    END;
    
    BEGIN
        DROP POLICY IF EXISTS "Authenticated users can upload recordings" ON storage.objects;
    EXCEPTION WHEN undefined_object THEN
        RAISE NOTICE 'Policy "Authenticated users can upload recordings" does not exist, skipping...';
    END;
    
    BEGIN
        DROP POLICY IF EXISTS "Users can update their own recordings" ON storage.objects;
    EXCEPTION WHEN undefined_object THEN
        RAISE NOTICE 'Policy "Users can update their own recordings" does not exist, skipping...';
    END;
    
    BEGIN
        DROP POLICY IF EXISTS "Users can delete their own recordings" ON storage.objects;
    EXCEPTION WHEN undefined_object THEN
        RAISE NOTICE 'Policy "Users can delete their own recordings" does not exist, skipping...';
    END;
END $$;

-- Create new policies
-- Policy for public viewing
CREATE POLICY "Anyone can view recordings" 
ON storage.objects FOR SELECT 
USING (bucket_id = 'recordings');

-- Policy for anonymous uploads (for testing)
CREATE POLICY "Anonymous users can upload recordings" 
ON storage.objects FOR INSERT 
WITH CHECK (bucket_id = 'recordings');

-- Policy for anonymous updates (for testing)
CREATE POLICY "Anonymous users can update recordings" 
ON storage.objects FOR UPDATE 
USING (bucket_id = 'recordings');

-- Policy for anonymous deletes (for testing)
CREATE POLICY "Anonymous users can delete recordings" 
ON storage.objects FOR DELETE 
USING (bucket_id = 'recordings');

RAISE NOTICE 'Storage policies created/updated successfully';

-- Verify recordings table structure
DO $$
BEGIN
  IF NOT EXISTS (SELECT FROM pg_catalog.pg_tables WHERE schemaname = 'public' AND tablename = 'recordings') THEN
    -- Create the recordings table
    CREATE TABLE public.recordings (
      id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
      user_id uuid NULL DEFAULT auth.uid(),
      file_name text NOT NULL,
      file_path text NOT NULL,
      public_url text NOT NULL,
      duration bigint NOT NULL,
      recorded_at timestamp with time zone NULL DEFAULT now(),
      emotion_data jsonb NULL,
      created_at timestamp with time zone NULL DEFAULT now(),
      updated_at timestamp with time zone NULL DEFAULT now(),
      CONSTRAINT recordings_pkey PRIMARY KEY (id),
      CONSTRAINT recordings_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users (id)
    );
    
    -- Create trigger for updated_at
    CREATE OR REPLACE FUNCTION public.set_updated_at()
    RETURNS trigger AS $$
    BEGIN
      NEW.updated_at = now();
      RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;
    
    CREATE TRIGGER set_recordings_updated_at
    BEFORE UPDATE ON public.recordings
    FOR EACH ROW
    EXECUTE FUNCTION public.set_updated_at();
    
    -- Enable Row Level Security
    ALTER TABLE public.recordings ENABLE ROW LEVEL SECURITY;
    
    -- Anonymous policies for testing
    CREATE POLICY "Anonymous users can view recordings" 
    ON public.recordings FOR SELECT 
    TO anon
    USING (true);
    
    CREATE POLICY "Anonymous users can insert recordings" 
    ON public.recordings FOR INSERT 
    TO anon
    WITH CHECK (true);
    
    CREATE POLICY "Anonymous users can update recordings" 
    ON public.recordings FOR UPDATE 
    TO anon
    USING (true);
    
    CREATE POLICY "Anonymous users can delete recordings" 
    ON public.recordings FOR DELETE 
    TO anon
    USING (true);
    
    RAISE NOTICE 'Recordings table created successfully';
  ELSE
    RAISE NOTICE 'Recordings table already exists';
  END IF;
END $$;

-- Final verification message
DO $$
BEGIN
  RAISE NOTICE 'Database setup complete. You should now be able to save and fetch recordings.';
END $$; 